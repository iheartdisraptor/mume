<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE MudletPackage>
<MudletPackage version="1.0">
    <TriggerPackage>
        <TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
            <name>MUME</name>
            <script></script>
            <triggerType>0</triggerType>
            <conditonLineDelta>0</conditonLineDelta>
            <mStayOpen>0</mStayOpen>
            <mCommand></mCommand>
            <packageName>current</packageName>
            <mFgColor>#ff0000</mFgColor>
            <mBgColor>#ffff00</mBgColor>
            <mSoundFile></mSoundFile>
            <colorTriggerFgColor>#000000</colorTriggerFgColor>
            <colorTriggerBgColor>#000000</colorTriggerBgColor>
            <regexCodeList/>
            <regexCodePropertyList/>
            <TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
                <name>Chat Panel</name>
                <script></script>
                <triggerType>0</triggerType>
                <conditonLineDelta>0</conditonLineDelta>
                <mStayOpen>0</mStayOpen>
                <mCommand></mCommand>
                <packageName></packageName>
                <mFgColor>#ff0000</mFgColor>
                <mBgColor>#ffff00</mBgColor>
                <mSoundFile></mSoundFile>
                <colorTriggerFgColor>#000000</colorTriggerFgColor>
                <colorTriggerBgColor>#000000</colorTriggerBgColor>
                <regexCodeList/>
                <regexCodePropertyList/>
                <Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
                    <name>narrate (Chat Panel)</name>
                    <script>local colour = chat_panel.options.colours[&quot;narrate&quot;]
local message = &quot;&lt;&quot; .. colour .. &quot;&gt;&quot; .. matches[1] .. &quot;&lt;grey&gt;&quot;
chat_panel.publish(&quot;narrate&quot;, message)
</script>
                    <triggerType>0</triggerType>
                    <conditonLineDelta>0</conditonLineDelta>
                    <mStayOpen>0</mStayOpen>
                    <mCommand></mCommand>
                    <packageName></packageName>
                    <mFgColor>#ff0000</mFgColor>
                    <mBgColor>#ffff00</mBgColor>
                    <mSoundFile></mSoundFile>
                    <colorTriggerFgColor>#000000</colorTriggerFgColor>
                    <colorTriggerBgColor>#000000</colorTriggerBgColor>
                    <regexCodeList>
                        <string>^([^']+) narrates '(.+)'$</string>
                    </regexCodeList>
                    <regexCodePropertyList>
                        <integer>1</integer>
                    </regexCodePropertyList>
                </Trigger>
                <Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
                    <name>shout (Chat Panel)</name>
                    <script>local colour = chat_panel.options.colours[&quot;shout&quot;]
local message = &quot;&lt;&quot; .. colour .. &quot;&gt;&quot; .. matches[1] .. &quot;&lt;grey&gt;&quot;
chat_panel.publish(&quot;shout&quot;, message)
</script>
                    <triggerType>0</triggerType>
                    <conditonLineDelta>0</conditonLineDelta>
                    <mStayOpen>0</mStayOpen>
                    <mCommand></mCommand>
                    <packageName></packageName>
                    <mFgColor>#ff0000</mFgColor>
                    <mBgColor>#ffff00</mBgColor>
                    <mSoundFile></mSoundFile>
                    <colorTriggerFgColor>#000000</colorTriggerFgColor>
                    <colorTriggerBgColor>#000000</colorTriggerBgColor>
                    <regexCodeList>
                        <string>^([^']+) shouts '(.+)'$</string>
                    </regexCodeList>
                    <regexCodePropertyList>
                        <integer>1</integer>
                    </regexCodePropertyList>
                </Trigger>
                <Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
                    <name>say (Chat Panel)</name>
                    <script>local colour = chat_panel.options.colours[&quot;say&quot;]
local message = &quot;&lt;&quot; .. colour .. &quot;&gt;&quot; .. matches[1] .. &quot;&lt;grey&gt;&quot;
chat_panel.publish(&quot;say&quot;, message)
</script>
                    <triggerType>0</triggerType>
                    <conditonLineDelta>0</conditonLineDelta>
                    <mStayOpen>0</mStayOpen>
                    <mCommand></mCommand>
                    <packageName></packageName>
                    <mFgColor>#ff0000</mFgColor>
                    <mBgColor>#ffff00</mBgColor>
                    <mSoundFile></mSoundFile>
                    <colorTriggerFgColor>#000000</colorTriggerFgColor>
                    <colorTriggerBgColor>#000000</colorTriggerBgColor>
                    <regexCodeList>
                        <string>^([^']+) says '(.+)'$</string>
                    </regexCodeList>
                    <regexCodePropertyList>
                        <integer>1</integer>
                    </regexCodePropertyList>
                </Trigger>
                <Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
                    <name>tell (Chat Panel)</name>
                    <script>local colour = chat_panel.options.colours[&quot;tell&quot;]
local message = &quot;&lt;&quot; .. colour .. &quot;&gt;&quot; .. matches[1] .. &quot;&lt;grey&gt;&quot;
chat_panel.publish(&quot;tell&quot;, message)
</script>
                    <triggerType>0</triggerType>
                    <conditonLineDelta>0</conditonLineDelta>
                    <mStayOpen>0</mStayOpen>
                    <mCommand></mCommand>
                    <packageName></packageName>
                    <mFgColor>#ff0000</mFgColor>
                    <mBgColor>#ffff00</mBgColor>
                    <mSoundFile></mSoundFile>
                    <colorTriggerFgColor>#000000</colorTriggerFgColor>
                    <colorTriggerBgColor>#000000</colorTriggerBgColor>
                    <regexCodeList>
                        <string>^([^']+) tells you '(.+)'$</string>
                        <string>^([^']+) tells the group '(.+)'$</string>
                    </regexCodeList>
                    <regexCodePropertyList>
                        <integer>1</integer>
                        <integer>1</integer>
                    </regexCodePropertyList>
                </Trigger>
                <Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
                    <name>sing (Chat Panel)</name>
                    <script>local colour = chat_panel.options.colours[&quot;sing&quot;]
local message = &quot;&lt;&quot; .. colour .. &quot;&gt;&quot; .. matches[1] .. &quot;&lt;grey&gt;&quot;
chat_panel.publish(&quot;sing&quot;, message)
</script>
                    <triggerType>0</triggerType>
                    <conditonLineDelta>0</conditonLineDelta>
                    <mStayOpen>0</mStayOpen>
                    <mCommand></mCommand>
                    <packageName></packageName>
                    <mFgColor>#ff0000</mFgColor>
                    <mBgColor>#ffff00</mBgColor>
                    <mSoundFile></mSoundFile>
                    <colorTriggerFgColor>#000000</colorTriggerFgColor>
                    <colorTriggerBgColor>#000000</colorTriggerBgColor>
                    <regexCodeList>
                        <string>^([^']+) sings '(.+)'$</string>
                    </regexCodeList>
                    <regexCodePropertyList>
                        <integer>1</integer>
                    </regexCodePropertyList>
                </Trigger>
                <Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
                    <name>pray (Chat Panel)</name>
                    <script>local colour = chat_panel.options.colours[&quot;pray&quot;]
local message = &quot;&lt;&quot; .. colour .. &quot;&gt;&quot; .. matches[1] .. &quot;&lt;grey&gt;&quot;
chat_panel.publish(&quot;pray&quot;, message)
</script>
                    <triggerType>0</triggerType>
                    <conditonLineDelta>0</conditonLineDelta>
                    <mStayOpen>0</mStayOpen>
                    <mCommand></mCommand>
                    <packageName></packageName>
                    <mFgColor>#ff0000</mFgColor>
                    <mBgColor>#ffff00</mBgColor>
                    <mSoundFile></mSoundFile>
                    <colorTriggerFgColor>#000000</colorTriggerFgColor>
                    <colorTriggerBgColor>#000000</colorTriggerBgColor>
                    <regexCodeList>
                        <string>^([^']+) prays '(.+)'$</string>
                        <string>^([^']+) prays to (.+) '(.+)'$</string>
                    </regexCodeList>
                    <regexCodePropertyList>
                        <integer>1</integer>
                        <integer>1</integer>
                    </regexCodePropertyList>
                </Trigger>
                <Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
                    <name>yell (Chat Panel)</name>
                    <script>local colour = chat_panel.options.colours[&quot;yell&quot;]
local message = &quot;&lt;&quot; .. colour .. &quot;&gt;&quot; .. matches[1] .. &quot;&lt;grey&gt;&quot;
chat_panel.publish(&quot;yell&quot;, message)
</script>
                    <triggerType>0</triggerType>
                    <conditonLineDelta>0</conditonLineDelta>
                    <mStayOpen>0</mStayOpen>
                    <mCommand></mCommand>
                    <packageName></packageName>
                    <mFgColor>#ff0000</mFgColor>
                    <mBgColor>#ffff00</mBgColor>
                    <mSoundFile></mSoundFile>
                    <colorTriggerFgColor>#000000</colorTriggerFgColor>
                    <colorTriggerBgColor>#000000</colorTriggerBgColor>
                    <regexCodeList>
                        <string>^([^']+) yells '(.+)'$</string>
                    </regexCodeList>
                    <regexCodePropertyList>
                        <integer>1</integer>
                    </regexCodePropertyList>
                </Trigger>
            </TriggerGroup>
        </TriggerGroup>
    </TriggerPackage>
    <TimerPackage>
        <TimerGroup isActive="yes" isFolder="yes" isTempTimer="no" isOffsetTimer="no">
            <name>Packages</name>
            <script></script>
            <command></command>
            <packageName></packageName>
            <time>00:00:00.000</time>
            <Timer isActive="no" isFolder="no" isTempTimer="no" isOffsetTimer="no">
                <name>Load Packages</name>
                <script>packages.load()
disableTimer(&quot;Load Packages&quot;)</script>
                <command></command>
                <packageName></packageName>
                <time>00:00:05.000</time>
            </Timer>
        </TimerGroup>
    </TimerPackage>
    <AliasPackage>
        <AliasGroup isActive="yes" isFolder="yes">
            <name>Packages</name>
            <script></script>
            <command></command>
            <packageName></packageName>
            <regex></regex>
            <Alias isActive="yes" isFolder="no">
                <name>packages help</name>
                <script>echo(packages.help)</script>
                <command></command>
                <packageName></packageName>
                <regex>^ *packages +help *$</regex>
            </Alias>
        </AliasGroup>
        <AliasGroup isActive="yes" isFolder="yes">
            <name>MUME</name>
            <script></script>
            <command></command>
            <packageName>current</packageName>
            <regex></regex>
            <AliasGroup isActive="yes" isFolder="yes">
                <name>Chat Panel</name>
                <script></script>
                <command></command>
                <packageName></packageName>
                <regex></regex>
                <AliasGroup isActive="yes" isFolder="yes">
                    <name>Options</name>
                    <script></script>
                    <command></command>
                    <packageName></packageName>
                    <regex></regex>
                    <Alias isActive="yes" isFolder="no">
                        <name>chat panel set height &lt;channel&gt; &lt;number&gt;</name>
                        <script>local channel = string.trim(matches[2])
local value = tonumber(matches[3])
local panel = chat_panel.panels[channel]

if panel == nil then
	echo(&quot;Could not set height for &quot; .. channel .. &quot;.\n&quot;)
else
	panel.height = value
	chat_panel.setup_panels()
	echo(&quot;Ok.\n&quot;)
end</script>
                        <command></command>
                        <packageName></packageName>
                        <regex>^ *chat *panel *set *height +(.+) +(.+)$</regex>
                    </Alias>
                    <Alias isActive="yes" isFolder="no">
                        <name>chat panel set font size &lt;channel&gt; &lt;number&gt;</name>
                        <script>local channel = string.trim(matches[2])
local value = tonumber(matches[3])
local panel = chat_panel.panels[channel]

if panel == nil then
	echo(&quot;Could not set font size for &quot; .. channel .. &quot;.\n&quot;)
else
	panel.font_size = value
	chat_panel.setup_panels()
	echo(&quot;Ok.\n&quot;)
end</script>
                        <command></command>
                        <packageName></packageName>
                        <regex>^ *chat *panel *set *font +size +(.+) +(.+)$</regex>
                    </Alias>
                </AliasGroup>
                <AliasGroup isActive="yes" isFolder="yes">
                    <name>Quick Aliases</name>
                    <script></script>
                    <command></command>
                    <packageName></packageName>
                    <regex></regex>
                    <Alias isActive="yes" isFolder="no">
                        <name>chat panel toggle say (cps)</name>
                        <script>expandAlias(&quot;chat panel toggle say&quot;)</script>
                        <command></command>
                        <packageName></packageName>
                        <regex>^cps$</regex>
                    </Alias>
                    <Alias isActive="yes" isFolder="no">
                        <name>chat panel toggle tell (cpt)</name>
                        <script>expandAlias(&quot;chat panel toggle tell&quot;)</script>
                        <command></command>
                        <packageName></packageName>
                        <regex>^cpt$</regex>
                    </Alias>
                    <Alias isActive="yes" isFolder="no">
                        <name>chat panel toggle narrate (cpn)</name>
                        <script>expandAlias(&quot;chat panel toggle narrate&quot;)</script>
                        <command></command>
                        <packageName></packageName>
                        <regex>^cpn$</regex>
                    </Alias>
                    <Alias isActive="yes" isFolder="no">
                        <name>chat panel toggle all (cpa)</name>
                        <script>expandAlias(&quot;chat panel toggle all&quot;)</script>
                        <command></command>
                        <packageName></packageName>
                        <regex>^cpa$</regex>
                    </Alias>
                </AliasGroup>
                <Alias isActive="yes" isFolder="no">
                    <name>chat panel help</name>
                    <script>echo(chat_panel.help)</script>
                    <command></command>
                    <packageName></packageName>
                    <regex>^ *chat *panel *help *$</regex>
                </Alias>
                <Alias isActive="yes" isFolder="no">
                    <name>chat panel toggle &lt;channel&gt;</name>
                    <script>local target = string.trim(matches[2])

chat_panel.toggle_panel(target)
chat_panel.last_chat_panel = target</script>
                    <command></command>
                    <packageName></packageName>
                    <regex>^ *chat +panel +toggle +(.+)$</regex>
                </Alias>
                <Alias isActive="yes" isFolder="no">
                    <name>chat panel hide</name>
                    <script>if chat_panel.last_chat_panel then
	chat_panel.toggle_panel(chat_panel.last_chat_panel)
else
	chat_panel.hide_all_panels()
end</script>
                    <command></command>
                    <packageName></packageName>
                    <regex>^ *chat *panel *hide *$</regex>
                </Alias>
                <Alias isActive="yes" isFolder="no">
                    <name>chat panel make triggers</name>
                    <script>chat_panel.make_triggers()</script>
                    <command></command>
                    <packageName></packageName>
                    <regex>^ *chat +panel +make +triggers *$</regex>
                    <Alias isActive="yes" isFolder="no">
                        <name>chat panel set border &lt;number&gt;</name>
                        <script>local value = string.trim(matches[2])

chat_panel.options.border = value

for name, panel in pairs(chat_panel.panels) do
	local main_width, main_height = getMainWindowSize()
	resizeWindow(panel.handle, main_width, chat_panel.options.height)

	if panel.visible then
		local height = chat_panel.options.height + chat_panel.options.border
		setBorderTop(height)
	end
end
</script>
                        <command></command>
                        <packageName></packageName>
                        <regex>^ *chat *panel *set *border +(.+)$</regex>
                    </Alias>
                </Alias>
            </AliasGroup>
        </AliasGroup>
    </AliasPackage>
    <ActionPackage/>
    <ScriptPackage>
        <ScriptGroup isActive="yes" isFolder="yes">
            <name>Packages</name>
            <packageName></packageName>
            <script></script>
            <eventHandlerList/>
            <ScriptGroup isActive="yes" isFolder="yes">
                <name>Events</name>
                <packageName></packageName>
                <script></script>
                <eventHandlerList/>
                <Script isActive="yes" isFolder="no">
                    <name>packages.load</name>
                    <packageName></packageName>
                    <script>function packages.load()
	for name, package in pairs(packages.list) do
		packages.load_package(package)
	end
end</script>
                    <eventHandlerList>
                        <string>sysLoadEvent</string>
                    </eventHandlerList>
                </Script>
                <Script isActive="yes" isFolder="no">
                    <name>packages.save</name>
                    <packageName></packageName>
                    <script>function packages.save()
	for name, package in pairs(packages.list) do
		cecho(&quot;&lt;cyan&gt;[ USER ]  - &lt;grey&gt;Saving &quot; .. package.package_name .. &quot; ...\n&quot;)
		packages.mkdir(package.package_folder)
		table.save(package.package_table, package)
	end
end</script>
                    <eventHandlerList>
                        <string>sysExitEvent</string>
                    </eventHandlerList>
                </Script>
                <Script isActive="yes" isFolder="no">
                    <name>load_package</name>
                    <packageName></packageName>
                    <script>function packages.load_package(package)
	if package.package_loaded then
		return
	end

	if io.exists(package.package_table) then
		cecho(&quot;&lt;cyan&gt;[ USER ]  - &lt;grey&gt;Loading &quot; .. package.package_name .. &quot; ...\n&quot;)

		table.load(package.package_table, package)

		if package.load ~= nil then
			package.load()
		end
	else
		cecho(&quot;&lt;cyan&gt;[ USER ]  - &lt;grey&gt;Initializing &quot; .. package.package_name .. &quot; ...\n&quot;)

		packages.mkdir(package.package_folder)

		if package.initialize ~= nil then
			package.initialize()
		end
	end

	package.package_loaded = true
end</script>
                    <eventHandlerList/>
                </Script>
            </ScriptGroup>
            <ScriptGroup isActive="yes" isFolder="yes">
                <name>File System</name>
                <packageName></packageName>
                <script></script>
                <eventHandlerList/>
                <Script isActive="yes" isFolder="no">
                    <name>mkdir</name>
                    <packageName></packageName>
                    <script>function packages.mkdir(dirname)
	local replace = string.gsub(dirname, &quot;\\&quot;, &quot;/&quot;)
	local split = string.split(replace, &quot;/&quot;)

	local path = &quot;&quot;	
	for index, dir in ipairs(split) do
		path = path .. dir .. &quot;/&quot;
		if not io.exists(path) then
			lfs.mkdir(path)
		end
	end
end</script>
                    <eventHandlerList/>
                </Script>
                <Script isActive="yes" isFolder="no">
                    <name>get_folder</name>
                    <packageName></packageName>
                    <script>function packages.get_folder(name)
	return getMudletHomeDir() .. &quot;/&quot; .. name
end</script>
                    <eventHandlerList/>
                </Script>
                <Script isActive="yes" isFolder="no">
                    <name>get_table</name>
                    <packageName></packageName>
                    <script>function packages.get_table(name)
	local dirname = packages.get_folder(name)
	return dirname .. &quot;/table.lua&quot;
end</script>
                    <eventHandlerList/>
                </Script>
            </ScriptGroup>
            <Script isActive="yes" isFolder="no">
                <name>README</name>
                <packageName></packageName>
                <script>packages.help = [[
Packages

This script helps to manage different packages by providing a mechanism to initialize a package if the package's table doesn't exist in memory or on disk or load the package's table if it exists on disk. The package's folder in the Mudlet profile is automatically created.

To setup a package, use the following line of code:

   my_package = my_package or packages.make(&quot;My Package&quot;)

Next, optionally include the following functions:

   function my_package.initialize()
      -- Place initialization code here for when table my_package
      -- does not exist in memory or on disk.
   end

   function my_package.load()
      -- Place special code to run after the package table is
      -- loaded from disk.
   end

The following variables are created in the package's table:
- package_name : The name passed to packages.make().
- package_folder : Path to the package's folder within the user's Mudlet profile.
- package_table : Path to the package's table file.
- package_loaded : Whether the package has been loaded. This is managed by the script.

Commands:
- packages help : Show this message.

Changelog:
- 1.0, 2015-2-12
  - Initial release.

Author: Octavia
]]</script>
                <eventHandlerList/>
            </Script>
            <Script isActive="yes" isFolder="no">
                <name>make</name>
                <packageName></packageName>
                <script>function packages.make(name)
	local package = {}
	packages.list[name] = package

	local dirname = packages.get_folder(name)
	local filename = packages.get_table(name)
	packages.mkdir(dirname)

	package.package_name = name
	package.package_folder = dirname
	package.package_table = filename
	package.package_loaded = false

	enableTimer(&quot;Load Packages&quot;)

	return package
end</script>
                <eventHandlerList/>
            </Script>
        </ScriptGroup>
        <ScriptGroup isActive="yes" isFolder="yes">
            <name>MUME</name>
            <packageName>current</packageName>
            <script></script>
            <eventHandlerList/>
            <ScriptGroup isActive="yes" isFolder="yes">
                <name>Chat Panel</name>
                <packageName></packageName>
                <script>chat_panel = chat_panel or packages.make(&quot;Chat Panel&quot;)</script>
                <eventHandlerList/>
                <ScriptGroup isActive="yes" isFolder="yes">
                    <name>Setup</name>
                    <packageName></packageName>
                    <script></script>
                    <eventHandlerList/>
                    <Script isActive="yes" isFolder="no">
                        <name>initialize</name>
                        <packageName></packageName>
                        <script>function chat_panel.initialize()
	chat_panel.options = {
		default_height = 100,
		border = 3,
		colours = {
			[&quot;say&quot;] = &quot;cyan&quot;,
			[&quot;yell&quot;] = &quot;magenta&quot;,
			[&quot;tell&quot;] = &quot;green&quot;,
			[&quot;narrate&quot;] = &quot;yellow&quot;,
			[&quot;sing&quot;] = &quot;yellow&quot;,
			[&quot;pray&quot;] = &quot;cyan&quot;,
			[&quot;shout&quot;] = &quot;red&quot;,
		},
	}

	chat_panel.max_messages = 500

	chat_panel.publishers = {}
	chat_panel.make_publisher(&quot;say&quot;)
	chat_panel.make_publisher(&quot;tell&quot;)
	chat_panel.make_publisher(&quot;yell&quot;)
	chat_panel.make_publisher(&quot;narrate&quot;)
	chat_panel.make_publisher(&quot;sing&quot;)
	chat_panel.make_publisher(&quot;shout&quot;)
	chat_panel.make_publisher(&quot;pray&quot;)

	chat_panel.panels = {}
	chat_panel.make_panel(&quot;say&quot;, &quot;say&quot;)
	chat_panel.make_panel(&quot;tell&quot;, &quot;tell&quot;)
	chat_panel.make_panel(&quot;yell&quot;, &quot;yell&quot;)
	chat_panel.make_panel(&quot;narrate&quot;, &quot;narrate&quot;)
	chat_panel.make_panel(&quot;sing&quot;, &quot;sing&quot;)
	chat_panel.make_panel(&quot;shout&quot;, &quot;shout&quot;)
	chat_panel.make_panel(&quot;pray&quot;, &quot;pray&quot;)

	local all = {
		&quot;say&quot;,
		&quot;tell&quot;,
		&quot;yell&quot;,
		&quot;narrate&quot;,
		&quot;sing&quot;,
		&quot;shout&quot;,
		&quot;pray&quot;,
	}	
	chat_panel.make_panel(&quot;all&quot;, all)

	chat_panel.setup_panels()
end</script>
                        <eventHandlerList/>
                    </Script>
                    <Script isActive="yes" isFolder="no">
                        <name>load</name>
                        <packageName></packageName>
                        <script>function chat_panel.load()
	chat_panel.setup_panels()
end</script>
                        <eventHandlerList/>
                    </Script>
                    <Script isActive="yes" isFolder="no">
                        <name>make_panel</name>
                        <packageName></packageName>
                        <script>function chat_panel.make_panel(name, publishers)
	local panel = {}

	panel.name = name
	panel.handle = chat_panel.package_name .. &quot;: &quot; .. name
	panel.visible = false
	panel.font_size = 8
	panel.height = chat_panel.options.default_height

	if type(publishers) ~= &quot;table&quot; then
		publishers = { publishers }
	end

	for index, publisher in ipairs(publishers) do
		chat_panel.subscribe(name, publisher)
	end

	chat_panel.panels[name] = panel
end</script>
                        <eventHandlerList/>
                    </Script>
                    <Script isActive="yes" isFolder="no">
                        <name>make_publisher</name>
                        <packageName></packageName>
                        <script>function chat_panel.make_publisher(name)
	local publisher = {}

	publisher.name = name

	publisher.messages = {}
	publisher.subscribers = {}

	chat_panel.publishers[name] = publisher
end</script>
                        <eventHandlerList/>
                    </Script>
                    <Script isActive="yes" isFolder="no">
                        <name>setup_panels</name>
                        <packageName></packageName>
                        <script>function chat_panel.setup_panels()
	local main_width, main_height = getMainWindowSize()

	for name, panel in pairs(chat_panel.panels) do
		createMiniConsole(panel.handle, 0, 0, 0, 0)
		moveWindow(panel.handle, 0, 0)
		resizeWindow(panel.handle, main_width, panel.height)
		setBackgroundColor(panel.handle, 0, 0, 0, 255)
		setMiniConsoleFontSize(panel.handle, panel.font_size)
		setWindowWrap(panel.handle, 120)
		setTextFormat(panel.handle, 0, 0, 0, 127, 127, 127, 0, 0, 0)

		clearUserWindow(panel.handle)
		echo(panel.handle, &quot;Messages (&quot; .. panel.name .. &quot;):\n&quot;)

		if panel.visible == false then
			hideWindow(panel.handle)
		else
			showWindow(panel.handle)
			setBorderTop(panel.height + chat_panel.options.border)
			setBorderColor(127, 127, 127)
		end
	end

	chat_panel.replay_messages()
end</script>
                        <eventHandlerList/>
                    </Script>
                    <Script isActive="yes" isFolder="no">
                        <name>replay_messages</name>
                        <packageName></packageName>
                        <script>function chat_panel.replay_messages()
	for name, publisher in pairs(chat_panel.publishers) do
		for index, subscriber in ipairs(publisher.subscribers) do
			local panel = chat_panel.panels[subscriber]
			for msg_index, message in ipairs(publisher.messages) do
				cecho(panel.handle, message .. &quot;\n&quot;)
			end
		end
	end
end</script>
                        <eventHandlerList/>
                    </Script>
                </ScriptGroup>
                <ScriptGroup isActive="yes" isFolder="yes">
                    <name>Triggers</name>
                    <packageName></packageName>
                    <script></script>
                    <eventHandlerList/>
                    <Script isActive="yes" isFolder="no">
                        <name>channels</name>
                        <packageName></packageName>
                        <script>chat_panel.channels = {
	[&quot;say&quot;] = {
		name = &quot;say&quot;,
		regex = {
			&quot;^([^']+) says '(.+)'$&quot;,
		},
	},
	[&quot;tell&quot;] = {
		name = &quot;tell&quot;,
		regex = {
			&quot;^([^']+) tells you '(.+)'$&quot;,
			&quot;^([^']+) tells the group '(.+)'$&quot;,
		},
	},
	[&quot;yell&quot;] = {
		name = &quot;yell&quot;,
		regex = {
			&quot;^([^']+) yells '(.+)'$&quot;,
		},
	},
	[&quot;narrate&quot;] = {
		name = &quot;narrate&quot;,
		regex = {
			&quot;^([^']+) narrates '(.+)'$&quot;,
		},
	},
	[&quot;sing&quot;] = {
		name = &quot;sing&quot;,
		regex = {
			&quot;^([^']+) sings '(.+)'$&quot;,
		},
	},
	[&quot;shout&quot;] = {
		name = &quot;shout&quot;,
		regex = {
			&quot;^([^']+) shouts '(.+)'$&quot;,
		},
	},
	[&quot;pray&quot;] = {
		name = &quot;pray&quot;,
		regex = {
			&quot;^([^']+) prays '(.+)'$&quot;,
			&quot;^([^']+) prays to (.+) '(.+)'$&quot;,
		},
	},
}</script>
                        <eventHandlerList/>
                    </Script>
                    <Script isActive="yes" isFolder="no">
                        <name>make_triggers</name>
                        <packageName></packageName>
                        <script>function chat_panel.make_triggers()
	local code

	for name, channel in pairs(chat_panel.channels) do
		local name = channel.name .. &quot; (&quot; .. chat_panel.package_name .. &quot;)&quot;
		local parent = chat_panel.package_name
		local regex = channel.regex
		local code = chat_panel.get_trigger_code(channel)

		if exists(name, &quot;trigger&quot;) == 0 then
			permRegexTrigger(name, parent, regex, code)
		else
			echo(chat_panel.package_name .. &quot;: Error: Already exists: &quot; .. name .. &quot;.\n&quot;)
		end
	end
end</script>
                        <eventHandlerList/>
                    </Script>
                    <Script isActive="yes" isFolder="no">
                        <name>get_trigger_code</name>
                        <packageName></packageName>
                        <script>function chat_panel.get_trigger_code(channel)
	local code = [[
local colour = chat_panel.options.colours[&quot;&lt;NAME&gt;&quot;]
local message = &quot;&lt;&quot; .. colour .. &quot;&gt;&quot; .. matches[1] .. &quot;&lt;grey&gt;&quot;
chat_panel.publish(&quot;&lt;NAME&gt;&quot;, message)
]]
	code = string.gsub(code, &quot;&lt;NAME&gt;&quot;, channel.name)
	return code
end</script>
                        <eventHandlerList/>
                    </Script>
                </ScriptGroup>
                <ScriptGroup isActive="yes" isFolder="yes">
                    <name>Publish/Subscribe</name>
                    <packageName></packageName>
                    <script></script>
                    <eventHandlerList/>
                    <Script isActive="yes" isFolder="no">
                        <name>publish</name>
                        <packageName></packageName>
                        <script>function chat_panel.publish(publisher_name, message)
	local publisher = chat_panel.publishers[publisher_name]

	if table.size(publisher.messages) &gt; chat_panel.max_messages then
		table.remove(publisher.messages, 1)
	end

	table.insert(publisher.messages, message)

	for index, subscriber in ipairs(publisher.subscribers) do
		local panel = chat_panel.panels[subscriber]
		cecho(panel.handle, message .. &quot;\n&quot;)
	end
end</script>
                        <eventHandlerList/>
                    </Script>
                    <Script isActive="yes" isFolder="no">
                        <name>subscribe</name>
                        <packageName></packageName>
                        <script>function chat_panel.subscribe(subscriber_name, publisher_name)
	local publisher = chat_panel.publishers[publisher_name]
	table.insert(publisher.subscribers, subscriber_name)
end</script>
                        <eventHandlerList/>
                    </Script>
                    <Script isActive="yes" isFolder="no">
                        <name>hide_all_panels</name>
                        <packageName></packageName>
                        <script>function chat_panel.hide_all_panels()
	for name, panel in pairs(chat_panel.panels) do
		hideWindow(panel.handle)
		panel.visible = false
	end

	setBorderTop(0)
end</script>
                        <eventHandlerList/>
                    </Script>
                    <Script isActive="yes" isFolder="no">
                        <name>toggle_panel</name>
                        <packageName></packageName>
                        <script>function chat_panel.toggle_panel(name)
	local panel = chat_panel.panels[name]
	panel.visible = not panel.visible

	if panel.visible then
		chat_panel.hide_all_panels()
		panel.visible = true

		local height = panel.height + chat_panel.options.border
		setBorderTop(height)
		setBorderColor(127, 127, 127)

		showWindow(panel.handle)
	else
		chat_panel.hide_all_panels()
	end
end</script>
                        <eventHandlerList/>
                    </Script>
                </ScriptGroup>
                <Script isActive="yes" isFolder="no">
                    <name>README</name>
                    <packageName></packageName>
                    <script>chat_panel.help = [[
Chat Panel

This script places a panel above the main console window that captures the different forms of communication (say, tell, narrate, etc.). This is useful in spam heavy situations (moving, fighting) where you still want to read what people are saying. It is also useful for when you want to look back at what people have said in the past few hours or so. There is one channel per type of communication plus an &quot;all&quot; channel that captures all of the others. You can enable whichever channel you prefer using the commands below.

Commands:
- chat panel help : Shows this message.
- chat panel toggle &lt;channel&gt; : Toggle the panel for specific communication channel. &lt;channel&gt; may be say, yell, tell, narrate, sing, shout, or all.
- chat panel hide : Hides the chat panel.
- chat panel set height &lt;channel&gt; &lt;number&gt; : Sets the height of the panel/channel (say, narrate, etc.) in pixels.
- chat panel set font size &lt;channel&gt; &lt;number&gt; : Sets the font size of the panel/channel.

Changelog:
- 1.1, 2015-2-12
  - Made settings and last 500 messages save across sessions.
  - Implemented set height per channel.
  - Implemented set font size per channel.
- 1.0, 2015-2-7
  - Initial release.

Dependencies:
- Packages (included)

Author: Octavia
]]</script>
                    <eventHandlerList/>
                </Script>
            </ScriptGroup>
        </ScriptGroup>
    </ScriptPackage>
    <KeyPackage/>
</MudletPackage>
