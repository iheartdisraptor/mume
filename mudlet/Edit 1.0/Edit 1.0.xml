<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE MudletPackage>
<MudletPackage version="1.0">
    <TriggerPackage>
        <TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
            <name>Edit</name>
            <script></script>
            <triggerType>0</triggerType>
            <conditonLineDelta>0</conditonLineDelta>
            <mStayOpen>0</mStayOpen>
            <mCommand></mCommand>
            <packageName></packageName>
            <mFgColor>#ff0000</mFgColor>
            <mBgColor>#ffff00</mBgColor>
            <mSoundFile></mSoundFile>
            <colorTriggerFgColor>#000000</colorTriggerFgColor>
            <colorTriggerBgColor>#000000</colorTriggerBgColor>
            <regexCodeList/>
            <regexCodePropertyList/>
            <Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
                <name>Detect Line Editor</name>
                <script>-- Build the filename out of the date and description
edit.filename = &quot;Edit.&quot; .. getTime(true, &quot;yyyy.MM.dd.HH.mm.ss&quot;) .. &quot;-&quot; .. edit.description .. &quot;.txt&quot;

-- Build the full path to the text file
edit.filename_fullpath = edit.mudlet .. &quot;\\&quot; .. edit.filename

-- Put the old text into the file
local file = io.open(edit.filename_fullpath, &quot;w&quot;)
io.output(file)
for index, line in ipairs(edit.lines) do
	io.write(line .. &quot;\n&quot;)
end
io.close(file)

echo(&quot;\nEditing local file &quot; .. edit.filename .. &quot;.\n&quot;)
echo(&quot;Mudlet will send MUME your text when you finish editing.\n&quot;)

-- Run the local editor program and open the file 
local command = &quot;\&quot;&quot; .. edit.editor .. &quot;\&quot; \&quot;&quot; .. edit.filename_fullpath .. &quot;\&quot;&quot;
edit.process = spawn(display, command)
enableTimer(&quot;Edit: Check Process Closed&quot;)</script>
                <triggerType>0</triggerType>
                <conditonLineDelta>0</conditonLineDelta>
                <mStayOpen>0</mStayOpen>
                <mCommand></mCommand>
                <packageName></packageName>
                <mFgColor>#ff0000</mFgColor>
                <mBgColor>#ffff00</mBgColor>
                <mSoundFile></mSoundFile>
                <colorTriggerFgColor>#000000</colorTriggerFgColor>
                <colorTriggerBgColor>#000000</colorTriggerBgColor>
                <regexCodeList>
                    <string>==&gt;</string>
                </regexCodeList>
                <regexCodePropertyList>
                    <integer>3</integer>
                </regexCodePropertyList>
            </Trigger>
            <Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
                <name>Detect Old Text</name>
                <script>enableTrigger(&quot;Edit: Capture Line&quot;)

-- Two lines above the &quot;---&quot; line is the description
edit.description = getLines(getLineNumber() - 2, getLineNumber() - 1)[1]</script>
                <triggerType>0</triggerType>
                <conditonLineDelta>99</conditonLineDelta>
                <mStayOpen>0</mStayOpen>
                <mCommand></mCommand>
                <packageName></packageName>
                <mFgColor>#ff0000</mFgColor>
                <mBgColor>#ffff00</mBgColor>
                <mSoundFile></mSoundFile>
                <colorTriggerFgColor>#000000</colorTriggerFgColor>
                <colorTriggerBgColor>#000000</colorTriggerBgColor>
                <regexCodeList>
                    <string>-------------------------------------------------------------------------------</string>
                </regexCodeList>
                <regexCodePropertyList>
                    <integer>3</integer>
                </regexCodePropertyList>
            </Trigger>
            <Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
                <name>Detect End of Old Text</name>
                <script>disableTrigger(&quot;Edit: Capture Line&quot;)</script>
                <triggerType>0</triggerType>
                <conditonLineDelta>0</conditonLineDelta>
                <mStayOpen>0</mStayOpen>
                <mCommand></mCommand>
                <packageName></packageName>
                <mFgColor>#ff0000</mFgColor>
                <mBgColor>#ffff00</mBgColor>
                <mSoundFile></mSoundFile>
                <colorTriggerFgColor>#000000</colorTriggerFgColor>
                <colorTriggerBgColor>#000000</colorTriggerBgColor>
                <regexCodeList>
                    <string>==&gt;</string>
                </regexCodeList>
                <regexCodePropertyList>
                    <integer>3</integer>
                </regexCodePropertyList>
            </Trigger>
            <Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
                <name>Edit: Capture Line</name>
                <script>-- Capture the old text (stuff between &quot;---&quot; and &quot;==&gt;&quot;)
if line ~= &quot;==&gt;&quot; and line ~= &quot;-------------------------------------------------------------------------------&quot; then
	table.insert(edit.lines, matches[1])
end</script>
                <triggerType>0</triggerType>
                <conditonLineDelta>0</conditonLineDelta>
                <mStayOpen>0</mStayOpen>
                <mCommand></mCommand>
                <packageName></packageName>
                <mFgColor>#ff0000</mFgColor>
                <mBgColor>#ffff00</mBgColor>
                <mSoundFile></mSoundFile>
                <colorTriggerFgColor>#000000</colorTriggerFgColor>
                <colorTriggerBgColor>#000000</colorTriggerBgColor>
                <regexCodeList>
                    <string>(.+)</string>
                    <string>^$</string>
                </regexCodeList>
                <regexCodePropertyList>
                    <integer>1</integer>
                    <integer>1</integer>
                </regexCodePropertyList>
            </Trigger>
        </TriggerGroup>
    </TriggerPackage>
    <TimerPackage>
        <TimerGroup isActive="yes" isFolder="yes" isTempTimer="no" isOffsetTimer="no">
            <name>Edit</name>
            <script></script>
            <command></command>
            <packageName></packageName>
            <time>00:00:05.000</time>
            <Timer isActive="no" isFolder="no" isTempTimer="no" isOffsetTimer="no">
                <name>Edit: Check Process Closed</name>
                <script>-- When the editor closes...
if not edit.process.isRunning() then
	echo(&quot;Deleting old message.\n&quot;)
	for index, line in ipairs(edit.lines) do
		send(&quot;%d&quot;)
	end

	echo(&quot;Sending new message.\n&quot;)
	for line in io.lines(edit.filename_fullpath) do
		if line == &quot;&quot; then
			send(&quot;\n&quot;)
		else
			send(line)
		end
	end

	-- Close the line editor
	send(&quot;%e&quot;)

	-- Clear the old message
	edit.lines = {}

	disableTimer(&quot;Edit: Check Process Closed&quot;)
end</script>
                <command></command>
                <packageName></packageName>
                <time>00:00:01.000</time>
            </Timer>
        </TimerGroup>
    </TimerPackage>
    <AliasPackage/>
    <ActionPackage/>
    <ScriptPackage>
        <ScriptGroup isActive="yes" isFolder="yes">
            <name>Edit</name>
            <packageName></packageName>
            <script>-- Edit: Local editing in Mudlet by p(Brynniel)
-- Version: 1.0
-- Date: 2015-2-3
--
-- This package enables local editing (the ability to use an editor on
-- your computer rather than the remote line editor offered by MUME.
-- To use this, you need set the edit.editor variable to the path to
-- the editor you want to use.
--
-- All files are stored in your Mudlet home directory  by default (see
-- getMudletHomeDir() and edit.mudlet below).
--

edit = edit or {}

-- Change this variable to point to your desired editor!
--edit.editor = [[C:\Windows\notepad.exe]]
edit.editor = [[C:\Program Files (x86)\Vim\vim74\gvim.exe]]

edit.mudlet = getMudletHomeDir()

edit.lines = {}</script>
            <eventHandlerList/>
        </ScriptGroup>
    </ScriptPackage>
    <KeyPackage/>
</MudletPackage>
